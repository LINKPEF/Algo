<view class="intro">冒泡排序详解</view>
<view class="text-style">
  <text decode="{{true}}">
    &emsp;&emsp;冒泡排序是排序算法的基础算法&emsp;通过将每次枚举时的最大值max移到数组的右侧(或将最小值min移至左侧而实现)&emsp;对于存在n个元素的数组&emsp;执行n-1次枚举&emsp;第K次枚举的比较次数为n-k&emsp;所以时间复杂度为O(N^2)
  </text>
  <text>
    介绍完冒泡排序的基本原理 下面来看一看实际的例子：
  </text>
  <text>
    这里给出一个数组
      <text style='font-weight:bold' >
        array:1 15 8 26 14 13 一共有6个元素
      </text>
      首先,我们希望获得从小到大排序的数组 根据冒泡排序 需要遍历5次
  </text>
  <text>
      <text decode='{{true}}'>1.\n&emsp; 1{{lt}}15 不交换\n&emsp;15{{gt}}8 交换\n&emsp;15{{lt}}26 不交换\n&emsp;26{{gt}}14 交换\n&emsp;26{{gt}}13 交换\n&emsp;\narray：1，8，15，14，13，26</text>\n
      <text decode='{{true}}'>2.\n&emsp; 1{{lt}}8 不交换\n&emsp;8{{lt}}15 不交换\n&emsp;15{{gt}}14 交换\n&emsp;15{{gt}}13 交换\n&emsp;\narray：1，8，14，13，15，26</text>\n
      <text decode='{{true}}'>3.\n&emsp; 1{{lt}}8 不交换\n&emsp;8{{lt}}14 不交换\n&emsp;14{{gt}}13 交换\n&emsp;\narray：1，8，13，14，15，26</text>\n
      <text decode='{{true}}'>4.\n&emsp; 1{{lt}}8 不交换\n&emsp;8{{lt}}13 不交换\n&emsp;\narray：1，8，13，14，15，26</text>\n
      <text decode='{{true}}'>5.\n&emsp; 1{{lt}}8 不交换\n&emsp;\narray：1，8，13，14，15，26</text>\n
      这样 通过冒泡排序算法就完成了对array数组的排序工作
    </text>\n
</view>
<view class='code-style'>
  <text decode='{{true}}'>
      #include {{lt}}iostream{{gt}}\n
      using namespace std;\n
      int main(){\n
      &emsp;&emsp;int array[6] = {1,15,8,26,14,13};\n
      &emsp;&emsp;int length = 6;\n
      &emsp;&emsp;int temp;\n
      &emsp;&emsp;for(int outter = 1; outter {{lt}} length; ++outter){\n
      &emsp;&emsp;&emsp;for(int index = 0; index {{lt}} length-outter; ++index){\n
      &emsp;&emsp;&emsp;&emsp;if ( array[index] {{gt}} array[index+1]){\n
      &emsp;&emsp;&emsp;&emsp;&emsp;temp = array[index];\n
      &emsp;&emsp;&emsp;&emsp;&emsp;array[index] = array[index+1];\n
      &emsp;&emsp;&emsp;&emsp;&emsp;array[index+1] = temp;\n
      &emsp;&emsp;&emsp;&emsp;}
      &emsp;&emsp;&emsp;}
      &emsp;&emsp;}
      &emsp;&emsp;return 0;
      }
    </text>
</view>